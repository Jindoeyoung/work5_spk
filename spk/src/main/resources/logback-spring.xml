<?xml version="1.0" encoding="UTF-8"?>
<!--
 [Layout]
 %m : 로그내용이 출력
 %p : trace > debug > info > warn > error 등의 priority 출력
 %r : 어플리케이션이 시작되어 로깅이벤트가 발생하는 시점까지의 경과시간을 밀리세컨드로 출력
 %c : 예) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력됩니다.
 %n :  플랫폼 종속적인 개행문자가 출력된다. \r\n 또는 \n 일것이다
 %d : 로깅이벤트가 일어나 날짜 출력 ( 프로그램의 실행속도를 느리게 한다.)
     예) %d{HH:mm:ss} 또는 %d{dd MMMM yyyy HH:mm:ss}
 %C : 호출자의 클래스명 출력
    예) 클래스구조가 org.apache.xyz.SomeClass 처럼 되어있다면 %C{2}는 xyz.SomeClass 가 출력됩니다
 %M : 로깅이 발생한 method 이름을 나타냅니다.
 %F : 로깅이 발생한 프로그램 파일명을 나타냅니다.
 %l : 로깅이 발생한 caller의 정보를 나타냅니다
 %L : 로깅이 발생한 caller의 라인수를 나타냅니다
 %x : 로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력합니다.
 %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다.
 %% : % 표시를 출력하기 위해 사용한다.
 %t : 로그이벤트가 발생된 쓰레드의 이름을 출력합니다
-->
<configuration>
    <!-- Local(Default) : Developer Personal Computer -->
    <springProfile name="default">
        <property resource="logback-default.properties" />
    </springProfile>

    <!-- OA : DWL QA Server -->
    <springProfile name="qa">
        <property resource="logback-qa.properties" />
    </springProfile>
    
    <!-- PROD : DWL PROD Server -->
    <springProfile name="prod">
        <property resource="logback-prod.properties" />
    </springProfile>    
    
    <!-- Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다. -->
    <springProperty scope="context" name="SPRING_LOG_LEVEL" source="logging.level.root" />
    <springProperty scope="context" name="APPLICATION_LOG_LEVEL" source="logging.level.com.spk.api" />

    <!-- properties -->
    <property name="LOGS_ABSOLUTE_PATH" value="${log.config.path}" />
    <property name="FILE_NAME_PREFIX" value="${log.config.prefix}" />
    <property name="ERROR_FILE_NAME_PREFIX" value="${log.config.error.prefix}" />
    <property name="LOG_PATTERN" value="%d|%5p|%m%n" />

    <!-- STDOUT Appender -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>${LOG_PATTERN}</Pattern>
        </layout>
    </appender>

    <springProfile name="default, qa, prod">
        <!-- FILE Appender -->
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${LOGS_ABSOLUTE_PATH}/${FILE_NAME_PREFIX}.log</file>
            <encoder>
                <pattern>${LOG_PATTERN}</pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${LOGS_ABSOLUTE_PATH}/${FILE_NAME_PREFIX}.%d{yyyyMMdd}.log</fileNamePattern>
                <maxHistory>30</maxHistory>
            </rollingPolicy>
        </appender>

        <!-- Error FILE Appender -->
        <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>WARN</level>
            </filter>
            <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <pattern>${LOG_PATTERN}</pattern>
            </encoder>
            <!-- Rolling 정책 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>${LOGS_ABSOLUTE_PATH}/${ERROR_FILE_NAME_PREFIX}.%d{yyyyMMdd}.log</fileNamePattern>
                <maxHistory>30</maxHistory>
            </rollingPolicy>
        </appender>
    </springProfile>

    <!-- Logger -->
    <logger name="com.ars.mms" level="${APPLICATION_LOG_LEVEL}" />

    <!-- TEST Profile -->
    <springProfile name="test">
        <root level="${SPRING_LOG_LEVEL}">
            <appender-ref ref="STDOUT" />
        </root>
    </springProfile>

    <!-- Others Profile -->
    <springProfile name="default, qa, prod">
        <root level="${SPRING_LOG_LEVEL}">
            <appender-ref ref="STDOUT" />
            <appender-ref ref="FILE" />
            <appender-ref ref="ERROR" />
        </root>
    </springProfile>

</configuration>